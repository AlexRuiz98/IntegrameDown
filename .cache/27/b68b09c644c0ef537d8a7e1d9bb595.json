{"id":"epB2","dependencies":[{"name":"/home/mike/dev/web/projects/IntegrameDown/package.json","includedInParent":true,"mtime":1615607614309},{"name":"@editorjs/editorjs","loc":{"line":1,"column":21},"parent":"/home/mike/dev/web/projects/IntegrameDown/src/js/main.js","resolved":"/home/mike/dev/web/projects/IntegrameDown/node_modules/@editorjs/editorjs/dist/editor.js"},{"name":"@editorjs/image","loc":{"line":2,"column":22},"parent":"/home/mike/dev/web/projects/IntegrameDown/src/js/main.js","resolved":"/home/mike/dev/web/projects/IntegrameDown/node_modules/@editorjs/image/dist/bundle.js"}],"generated":{"js":"\"use strict\";\n\nvar _editorjs = _interopRequireDefault(require(\"@editorjs/editorjs\"));\n\nvar _image = _interopRequireDefault(require(\"@editorjs/image\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nvar saveBtn = document.querySelector(\"#save-event-btn\"); // Editor Js\n\nvar editor = new _editorjs.default({\n  tools: {\n    image: {\n      class: _image.default,\n      config: {\n        endpoints: {\n          byFile: '/admin/event/body-image-file',\n          // Your backend file uploader endpoint\n          byUrl: '/admin/body-image-url' // Your endpoint that provides uploading by Url\n\n        }\n      }\n    }\n  },\n  onReady: function onReady() {\n    //Activate button for saving\n    saveBtn.addEventListener(\"click\", saveEditorData);\n  }\n});\n\nvar saveEditorData = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(e) {\n    var outputData;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return editor.save();\n\n          case 3:\n            outputData = _context.sent;\n            console.log(outputData);\n            _context.next = 10;\n            break;\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](0);\n            console.error(\"Saving failed\", _context.t0);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 7]]);\n  }));\n\n  return function saveEditorData(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar formEvent = document.querySelector(\"#form-event\");\nvar inputs = formEvent.querySelectorAll(\"input\");\nvar isValidInputs = [];\n\nvar inputChangeHandler = function inputChangeHandler(e) {\n  if (e.target.value) {\n    for (var i = 0; i < inputs.length; i++) {\n      if (inputs[i] === e.target) {\n        isValidInputs[i] = true;\n        break;\n      }\n    }\n\n    validateInputHandler();\n  }\n};\n\nvar validateInputHandler = function validateInputHandler() {\n  var allFormIsValid = true;\n\n  for (var i = 0; i < isValidInputs.length; i++) {\n    if (isValidInputs[i] === false) {\n      allFormIsValid = false;\n      break;\n    }\n  }\n\n  console.log(isValidInputs);\n  console.log(\"AllFormIsValid: \", allFormIsValid);\n  saveBtn.disabled = !allFormIsValid;\n};\n\ninputs.forEach(function (input, i) {\n  input.addEventListener(\"input\", inputChangeHandler);\n  isValidInputs[i] = false;\n});"},"sourceMaps":null,"error":null,"hash":"700eb90c6c7769348d5e32a3a40f4709","cacheData":{"env":{}}}