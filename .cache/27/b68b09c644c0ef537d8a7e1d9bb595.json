{"id":"epB2","dependencies":[{"name":"/home/mike/dev/web/projects/IntegrameDown/package.json","includedInParent":true,"mtime":1615607614309},{"name":"@editorjs/editorjs","loc":{"line":1,"column":21},"parent":"/home/mike/dev/web/projects/IntegrameDown/src/js/main.js","resolved":"/home/mike/dev/web/projects/IntegrameDown/node_modules/@editorjs/editorjs/dist/editor.js"},{"name":"@editorjs/image","loc":{"line":2,"column":22},"parent":"/home/mike/dev/web/projects/IntegrameDown/src/js/main.js","resolved":"/home/mike/dev/web/projects/IntegrameDown/node_modules/@editorjs/image/dist/bundle.js"},{"name":"./formValidator","loc":{"line":3,"column":37},"parent":"/home/mike/dev/web/projects/IntegrameDown/src/js/main.js","resolved":"/home/mike/dev/web/projects/IntegrameDown/src/js/formValidator.js"}],"generated":{"js":"\"use strict\";\n\nvar _editorjs = _interopRequireDefault(require(\"@editorjs/editorjs\"));\n\nvar _image = _interopRequireDefault(require(\"@editorjs/image\"));\n\nvar _formValidator = require(\"./formValidator\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nvar saveBtn = document.querySelector(\"#save-event-btn\"); // Editor Js\n\nvar editor = new _editorjs.default({\n  tools: {\n    image: {\n      class: _image.default,\n      config: {\n        endpoints: {\n          byFile: '/admin/event/body-image-file',\n          // Your backend file uploader endpoint\n          byUrl: '/admin/body-image-url' // Your endpoint that provides uploading by Url\n\n        }\n      }\n    }\n  },\n  onReady: function onReady() {\n    //Activate button for saving\n    saveBtn.addEventListener(\"click\", saveEditorData);\n  }\n});\n\nvar saveEditorData = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(e) {\n    var outputData, formData, mergedData, response;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return editor.save();\n\n          case 3:\n            outputData = _context.sent;\n            formData = getFormData();\n            mergedData = {\n              form: formData,\n              content: outputData\n            };\n            console.log(mergedData);\n            _context.next = 9;\n            return fetch(\"/admin/event\", {\n              method: 'POST',\n              // *GET, POST, PUT, DELETE, etc.\n              redirect: 'follow',\n              headers: {\n                'Content-Type': 'application/json' // 'Content-Type': 'application/x-www-form-urlencoded',\n\n              },\n              body: JSON.stringify(mergedData) // body data type must match \"Content-Type\" header\n\n            });\n\n          case 9:\n            response = _context.sent;\n\n            if (response.redirected) {\n              window.location.href = response.url;\n            }\n\n            _context.next = 16;\n            break;\n\n          case 13:\n            _context.prev = 13;\n            _context.t0 = _context[\"catch\"](0);\n            console.error(\"Saving failed\", _context.t0);\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 13]]);\n  }));\n\n  return function saveEditorData(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar getFormData = function getFormData() {\n  var formData = [];\n  inputs.forEach(function (input) {\n    formData.push({\n      input: input.name,\n      value: input.value\n    });\n  });\n  return formData;\n};\n\nvar formEvent = document.querySelector(\"#form-event\");\nvar inputs = formEvent.querySelectorAll(\"input\");\nvar isValidInputs = [];\n(0, _formValidator.formValidatorHandler)(inputs, saveBtn, isValidInputs);"},"sourceMaps":null,"error":null,"hash":"5765ba611452a51c315b60ff6dd78ba7","cacheData":{"env":{}}}